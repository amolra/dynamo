import React, { useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
import './App.css';
let speech: SpeechRecognition | null;
if (window.webkitSpeechRecognition) {
  // eslint-disable-next-line
  const SpeechRecognition = window.webkitSpeechRecognition;
  speech = new SpeechRecognition();
  speech.continuous = true;
  speech.lang = "en-IN"; // Set the language to "en-IN" for Indian English accent
  speech.interimResults = false;
  speech.maxAlternatives = 1;
} else {
  speech = null;
}
interface Option {
  name: string;
}

interface CustomDropdownProps {
  options: Option[],
  techType: string,
  // handleTechValue: (value: string) => void,
 isOpenValue:boolean,
 selectedValue:string,
}

const CustomDropdown: React.FC<CustomDropdownProps> = ({ options, techType,isOpenValue,selectedValue}) => {
  const [isOpen, setIsOpen] = useState(false);
  const selectRef = useRef<HTMLUListElement>(null);
 useEffect(()=>{
  if(isOpenValue)
  {
    openDropdown();
  }
  else if(!isOpenValue)
  {
    closeDropdown();
  }
  
 },[isOpenValue]);

 useEffect(()=>{
 if( selectRef.current && selectedValue.length >0)
 {
  console.log(selectedValue +"value selected");
  console.log(selectRef.current);
 // selectRef.current.value=selectedValue;
 }
 },[selectedValue]);

 
  const openDropdown = () => {
    setIsOpen(true);
  };

  const closeDropdown = () => {
    setIsOpen(false);
  };
 
  const handleOptionClick = (option: Option) => {
    console.log('Selected Option:', option);
   // handleTechValue(option.name);
    closeDropdown();
  };

  return (
    <div className="custom-dropdown">
      <button >{ selectedValue  ?  selectedValue : `Say ${techType}`} </button>
      {isOpen && (
        <ul className="dropdown-options" ref={selectRef}>
          {options.map((option, index) => (
            <li key={index} onClick={() => handleOptionClick(option)}>
              {option.name}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

const App: React.FC = () => {
  const options = [
    { value: 'template', img: 'image1.jpg' },
    { value: 'fancytemplate', img: 'image2.jpg' },
  ];
  const fetTechnology = [

    { name: 'react' },
    { name: 'angular' },
  ];
  const backendTechnology = [

    { name: 'Node' },
    { name: 'Python' },
    { name: 'Java' },
  ];


  const [isListening, setIsListening] = useState(false);
  const { register, handleSubmit } = useForm();
  const transcriptRef = useRef("");


  const fetTechRef = useRef<HTMLSelectElement>(null);;
  const backendTechRef = useRef<HTMLSelectElement>(null);;
  const templateRef = useRef(options.map(() => React.createRef<HTMLInputElement>()));
  const [fetTechValue, setFetTechValue] = useState('');
  const [backendTechValue, setBackendTechValue] = useState('');
  const [isOpenValueFet,setIsOpenValueFet]=useState(false);
  const [isOpenValueBackend,setIsOpenValueBackend]=useState(false);
  const [selectedValueBackend,setSelectedValueBackend]=useState('');
  const [selectedValueFet,setSelectedValueFet]=useState('');
  
  const handleFetTechValue = (value: string) => {
    setFetTechValue(value)
  }
  const handleBackendTechValue = (value: string) => {
    setBackendTechValue(value)
  }

   useEffect(()=>
   {
  listen();
   },[])



  const types = [
    { name: 'Type 1' },
    { name: 'Type 2' },
    { name: 'Type 3' },
  ];



  const handleCheckTemplate = (optionValue: string) => {
    const templateOptionRef = templateRef.current.find((ref) => ref.current?.value === optionValue);
    if (templateOptionRef) {
      templateOptionRef.current!.checked = true;
    }
  };

  const handleSpeechRecognition = (transcript: string) => {
    transcriptRef.current = transcript.toLowerCase();
    console.log(transcriptRef.current);
    // if (transcriptRef.current.includes("name")) {
    //   handleFieldActivation("name");
    //   const value = transcriptRef.current.replace(`my name is`, "").trim();
    //   inputRefs.current.name!.value = value;
    //   transcriptRef.current = "";
    // } else if (transcriptRef.current.includes("message")) {
    //   handleFieldActivation("message");
    //   const value = transcriptRef.current.replace("my message is", "").trim();
    //   inputRefs.current.message!.value = value;
    //   transcriptRef.current = "";
    // }

    if (transcriptRef.current.includes("fancy template")) {
      handleCheckTemplate("fancytemplate");
      transcriptRef.current = "";
    }
    else if (transcriptRef.current.includes("template")) {
      handleCheckTemplate("template");
      transcriptRef.current = "";
    }
    else if (transcriptRef.current.includes("f e t")|| transcriptRef.current.includes("fet") ||  transcriptRef.current.includes("front end")) {
      console.log("add click on dropdown");
      setIsOpenValueFet(true);
      
    }
    else  if(transcriptRef.current.includes("angular"))
      {
         handleFetTechValue("angular");
      
       if(fetTechValue)
      {
        setSelectedValueFet("angular");
       transcriptRef.current = "";
        setIsOpenValueFet(false);
        setFetTechValue('');
       
      }
    }
    
    else if (transcriptRef.current.includes("back end") || transcriptRef.current.includes("backend")) {
      setIsOpenValueBackend(true);

      transcriptRef.current = "";
      setIsOpenValueBackend(false);
      setBackendTechValue('');
      setSelectedValueFet("");
    }
   else if(transcriptRef.current.includes("react"))
    {
       handleFetTechValue("react");
       setIsOpenValueFet(false);
     console.log("said react");
     if(fetTechValue)
    {
      setSelectedValueFet("react");
      
     transcriptRef.current = "";
     
      setFetTechValue('');
    }
  }
  }
  const listen = () => {
    setIsListening(!isListening);
  };

  useEffect(() => {
    if (!speech) {
      return;
    }

    if (isListening) {
      speech.start();
    } else {
      speech.stop();
    }

    speech.onstart = () => {
      console.log("Speech recognition started");
    };

    speech.onresult = (event: SpeechRecognitionEvent) => {
      const transcript = event.results[event.results.length - 1][0].transcript;
      handleSpeechRecognition(transcript);
    };

    return () => {
      speech?.stop();
    };
  }, [isListening]);


  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    // Handle form submission logic here
  };
  console.log(fetTechValue);
  return (
    <form onSubmit={handleFormSubmit} className="form-container">

      {/* <div onClick={listen}>
        Click here {isListening ? "to stop listening" : "to start listening"}
      </div> */}
      <p>{transcriptRef.current}</p>
      {/* Rest of your code */}
      <div className="row header-form">
        <span className="col-12">
          <div className="row">
            {options.map((option, index) => (
              <label key={index}>
                <input type="radio" name="option" value={option.value} ref={templateRef.current[index]} />
                {option.value}
              </label>
            ))}
          </div>
        </span>
      </div>
      <div className="row header-form">
        {/* <div className="col-6">
            <label htmlFor="fetTech">Frontend Technology</label>
            <select
              id="fetTech"
              name="fetTech"
              ref={fetTechRef}
            >
              {fetTechnology.map((tech: any, index: number) => (
                <option key={index} value={tech.name}>
                  {tech.name}
                </option>
              ))}
            </select>
          </div>
          <div className="col-6">
            <label htmlFor="backTech">Backend Technology</label>
            <select
              id="backTech"
              name="backTech"
             ref={backendTechRef}
            >
              {backendTechnology.map((tech: any, index: number) => (
                <option key={index} value={tech.name}>
                  {tech.name}
                </option>
              ))}
            </select>
          </div> */}
        <CustomDropdown options={fetTechnology} techType={"fet technology"}   isOpenValue={isOpenValueFet} selectedValue={selectedValueFet}/>
        <CustomDropdown options={backendTechnology} techType={"backend technology"} isOpenValue={isOpenValueBackend}  selectedValue={selectedValueBackend} />
      </div>
      {/* Rest of the form fields */}
    </form>
  );
};

export default App;
