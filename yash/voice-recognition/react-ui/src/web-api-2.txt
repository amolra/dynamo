import React, { useEffect, useRef, useState } from 'react';
import { useForm } from 'react-hook-form';
let speech: SpeechRecognition | null;
if (window.webkitSpeechRecognition) {
  // eslint-disable-next-line
  const SpeechRecognition = window.webkitSpeechRecognition;
  speech = new SpeechRecognition();
  speech.continuous = true;
  speech.lang = "en-IN"; // Set the language to "en-IN" for Indian English accent
  speech.interimResults = false;
  speech.maxAlternatives = 1;
} else {
  speech = null;
}
const App: React.FC = () => {
  const options = [
    { value: 'template', img: 'image1.jpg' },
    { value: 'fancytemplate', img: 'image2.jpg' },
  ];
  const fetTechnology = [
    { name: 'say "frontend technology"' },
    { name: 'Technology 1' },
    { name: 'Technology 2' },
    { name: 'Technology 3' },
  ];
  const backendTechnology = [
    { name: 'say "backend technology"' },
    { name: 'Backend Tech 1' },
    { name: 'Backend Tech 2' },
    { name: 'Backend Tech 3' },
  ];


  const [isListening, setIsListening] = useState(false);
  const { register, handleSubmit } = useForm();
  const transcriptRef = useRef("");


  const fetTechRef = useRef<HTMLSelectElement>(null);;
  const backendTechRef = useRef<HTMLSelectElement>(null);;
  const templateRef = useRef(options.map(() => React.createRef<HTMLInputElement>()));



  
  const types = [
    { name: 'Type 1' },
    { name: 'Type 2' },
    { name: 'Type 3' },
  ];



  const handleCheckTemplate = (optionValue: string) => {
    const templateOptionRef = templateRef.current.find((ref) => ref.current?.value === optionValue);
    if (templateOptionRef) {
      templateOptionRef.current!.checked = true;
    }
  };

  const handleSpeechRecognition = (transcript: string) => {
    transcriptRef.current = transcript.toLowerCase();
    console.log(transcriptRef.current);
    // if (transcriptRef.current.includes("name")) {
    //   handleFieldActivation("name");
    //   const value = transcriptRef.current.replace(`my name is`, "").trim();
    //   inputRefs.current.name!.value = value;
    //   transcriptRef.current = "";
    // } else if (transcriptRef.current.includes("message")) {
    //   handleFieldActivation("message");
    //   const value = transcriptRef.current.replace("my message is", "").trim();
    //   inputRefs.current.message!.value = value;
    //   transcriptRef.current = "";
    // }

    if (transcriptRef.current.includes("fancy template")) {
      handleCheckTemplate("fancytemplate");
      transcriptRef.current = "";
    }
    else if (transcriptRef.current.includes("template")) {
      handleCheckTemplate("template");
      transcriptRef.current = "";
    }
    else if (transcriptRef.current.includes("fro")) {
      handleCheckTemplate("template");
      transcriptRef.current = "";
    }


  }

  const listen = () => {
    setIsListening(!isListening);
  };

  useEffect(() => {
    if (!speech) {
      return;
    }

    if (isListening) {
      speech.start();
    } else {
      speech.stop();
    }

    speech.onstart = () => {
      console.log("Speech recognition started");
    };

    speech.onresult = (event: SpeechRecognitionEvent) => {
      const transcript = event.results[event.results.length - 1][0].transcript;
      handleSpeechRecognition(transcript);
    };

    return () => {
      speech?.stop();
    };
  }, [isListening]);


  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    // Handle form submission logic here
  };

  return (
    <form onSubmit={handleFormSubmit} className="form-container">

      <div onClick={listen}>
        Click here {isListening ? "to stop listening" : "to start listening"}
      </div>
      <p>{transcriptRef.current}</p>
      {/* Rest of your code */}
      <div className="row header-form">
        <span className="col-12">
          <div className="row">
            {options.map((option, index) => (
              <label key={index}>
                <input type="radio" name="option" value={option.value} ref={templateRef.current[index]} />
                {option.value}
              </label>
            ))}
          </div>
        </span>
      </div>
      <div className="row header-form">
          <div className="col-6">
            <label htmlFor="fetTech">Frontend Technology</label>
            <select
              id="fetTech"
              name="fetTech"
              ref={fetTechRef}
            >
              {fetTechnology.map((tech: any, index: number) => (
                <option key={index} value={tech.name}>
                  {tech.name}
                </option>
              ))}
            </select>
          </div>
          <div className="col-6">
            <label htmlFor="backTech">Backend Technology</label>
            <select
              id="backTech"
              name="backTech"
             ref={backendTechRef}
            >
              {backendTechnology.map((tech: any, index: number) => (
                <option key={index} value={tech.name}>
                  {tech.name}
                </option>
              ))}
            </select>
          </div>
        </div>
      {/* Rest of the form fields */}
    </form>
  );
};

export default App;
